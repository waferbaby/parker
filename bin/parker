#!/usr/bin/env ruby
# frozen_string_literal: true

$LOAD_PATH.unshift(File.join(__dir__, '..', 'lib'))

require 'parker'
require 'parker/version'
require 'json'
require 'trollop'

trap('SIGINT') do
  puts 'Cancelled!'
  exit!
end

source_directory = File.expand_path(File.join('~/', '.config', 'parker'))

Trollop.options do
  version "parker v#{Parker::VERSION}"
  banner <<-BANNER
A ridiculous tool for organising game screenshots.

Usage:
parker [output directory]
Options:
BANNER
end

unless Dir.exist?(source_directory)
  FileUtils.mkdir_p(source_directory)
  puts "Created config directory: #{source_directory}"
  exit
end

Trollop.educate if ARGV.empty?

platforms = []

Dir.glob(File.join(source_directory, 'platforms', '*.json')).each do |path|
  klass = case File.basename(path, File.extname(path)).to_sym
          when :ps4
            'PS4'
          when :switch
            'Switch'
          when :steam
            'Steam'
          end

  next if klass.nil?

  platform_config = JSON.parse(File.read(path))

  platforms << Object.const_get("Parker::Platform::#{klass}").new(
    platform_config['name'],
    platform_config['source_path'],
    platform_config['games']
  )
end

if platforms.empty?
  puts 'Nothing to do (no platforms found).'
  exit
end

output_path = File.expand_path(ARGV[0])
FileUtils.mkdir_p(output_path) unless Dir.exist?(output_path)

puts 'Scanning...'

platforms.each do |platform|
  platform.games.each_value do |game|
    next unless game.screenshots.count.positive?

    print "- #{game.name} (#{platform.name}): "

    platform_path = File.join(output_path, platform.name)
    copied_count = game.copy_screenshots(platform_path)

    if copied_count.positive?
      puts "Copied #{copied_count} new screenshot#{'s' if copied_count != 1}."
    else
      puts 'âœ“'
    end
  end
end

puts "\nDone!"
